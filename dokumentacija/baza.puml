@startuml modeli iz baze
authUser <.. User : uid
authUser ..> Firebase : authUser
Context ..> authUser
MyApp ..> Context : AuthUserProvider
Layout --|> MyApp
Index --|> Layout
Register --|> Layout
Login --|> Layout
UserInfo --|> Layout
ChangePassword --|> Layout
ChangeInfo --|> Layout
ChangePassword ..|> useMyHooks
VlasnikForm --|> Register
PrivatnaForm --|> Register
VlasnikForm ..|> useMyHooks
PrivatnaForm ..|> useMyHooks
Company --* User : companyOwner? -> uid

class authUser {
    -uid: string
    -email: string
    -verified: boolean
}

class User {
    -uid: string
    -email: string
    -username: string
    -companyOwner: boolean
}

class Company {
    -uid: string
    -name: string
    -address: string
    -phone: string
    -description: string
    -type: string
    -owner: string
}

class Firebase {
    -firebaseConfig: object
    -app: object
    -db: object
    -auth: object
    -formatAuthUser(authUser): object
    -authStateChanged(): void
    -firebaseEmailPassSignIn(email, password): promise
    -firebaseCreateUserEmailPass(username, email, password): void
    -firebaseCreateCompanyOwner(username, email, password, companyName, companyAddress, companyOIB, companyPhone, companyDesc, companyType): void
    -firebaseSignOut(): void
    -firebase(): object
}

class Context {
    -authUserContext(authUser, loading, firebaseEmailPassSignIn, firebaseCreateUserEmailPass, firebaseCreateCompanyOwner, firebaseSignOut): object
    -auth(): object
    -AuthUserProvider(children): object
}

interface useMyHooks {
    -checkPasswordBlaclist(password): boolean
}

class MyApp {
    -AuthUserProvider: object
    -children: any
    -myapp(): app
}

abstract class Layout {
    -children: any
    -description: string
    -head: any
    -linkFavicon: string
    -title: string
    -title(page): title
    -layout(): html
}

class Login {
    -router: object
    -authUser: object
    -email: string
    -setEmail(email): void
    -password: string
    -setPassword(password): void
    -error: string
    -setError(error): void
    -loading: boolean
    -setLoading(loading): void
    -disabled: boolean
    -setDisabled(disabled): void
    -firebaseEmailPassSignIn(email, password): promise
    -handleSubmit(event): void
    -useEffect(email, password): void
    -login(): html
}

class Register {
    -router: object
    -authUser: object
    -loading: boolean
    -privatna: boolean
    -setPrivatna(privatna): void
    -vlasnik: boolean
    -setVlasnik(vlasnik): void
    -PrivatnaForm: object
    -VlasnikForm: object
    -register(): html
}

class PrivatnaForm {
    -email: string
    -setEmail(email): void
    -password: string
    -setPassword(password): void
    -username: string
    -setUsername(username): void
    -loading: boolean
    -setLoading(loading): void
    -usernameExists: boolean
    -setUsernameExists(usernameExists): void
    -emailExists: boolean
    -setEmailExists(emailExists): void
    -passwordError: string
    -setPasswordError(passwordError): void
    -disabled: boolean
    -setDisabled(disabled): void
    -firebaseCreateUserEmailPass(username, email, password)
    -handleSubmit(event): void
    -useEffectDisabled(username, password, email, usernameExists, emailExists, passwordError, loading): void
    -useEffectUsernameEmail(username, email): void
    -checkUsernameAndEmail(username, email): void
    -checkPassword(password): void
    -PrivatnaForm(): html
}

class VlasnikForm {
    -email: string
    -setEmail(email): void
    -password: string
    -setPassword(password): void
    -username: string
    -setUsername(username): void
    -loading: boolean
    -setLoading(loading): void
    -companyName: string
    -setCompanyName(companyName): void
    -companyAddress: string
    -setCompanyAddress(companyAddress): void
    -companyGeopoint: object
    -setCompanyGeopoint(companyGeopoint): void
    -companyOIB: string
    -setCompanyOIB(companyOIB): void
    -companyPhone: string
    -setCompanyPhone(companyPhone): void
    -companyDesc: string
    -setCompanyDesc(companyDesc): void
    -companyType: string
    -setCompanyType(companyType): void
    -usernameExists: boolean
    -setUsernameExists(usernameExists): void
    -emailExists: boolean
    -setEmailExists(emailExists): void
    -passwordError: string
    -setPasswordError(passwordError): void
    -companyNameError: string
    -setCompanyNameError(companyNameError): void
    -companyOIBError: string
    -setCompanyOIBError(companyOIBError): void
    -companyPhoneError: string
    -setCompanyPhoneError(companyPhoneError): void
    -companyDescError: string
    -setCompanyDescError(companyDescError): void
    -firstName: string
    -setFirstName(firstName): void
    -lastName: string
    -setLastName(lastName): void
    -companyNamePay: string
    -setCompanyNamePay(companyNamePay): void
    -companyOIBPay: string
    -setCompanyOIBPay(companyOIBPay): void
    -address: string
    -setAddress(address): void
    -geopoint: object
    -setGeopoint(geopoint): void
    -country: string
    -setCountry(country): void
    -region: string
    -setRegion(region): void
    -city: string
    -setCity(city): void
    -zipCode: string
    -setZipCode(zipCode): void
    -VAT: string
    -setVAT(VAT): void
    -cardNumber: string
    -setCardNumber(cardNumber): void
    -cardExpiryDate: string
    -setCardExpiryDate(cardExpiryDate): void
    -cardCVC: string
    -setCardCVC(cardCVC): void
    -companyNamePayError: string
    -setCompanyNamePayError(companyNamePayError): void
    -companyOIBPayError: string
    -setCompanyOIBPayError(companyOIBPayError): void
    -companyTypes: array
    -disabled: boolean
    -setDisabled(disabled): void
    -checked: boolean
    -setChecked(checked): void
    -isLoaded: boolean
    -loadError: string
    -search: object
    -setSearch(search): void
    -searchCard: object
    -setSearchCard(searchCard): void
    -onSearchLoad(search): void
    -onSearchLoadCard(searchCard): void
    -onPlaceChanged(): void
    -onPlaceChangedCard(): void
    -libraries: array
    -router: object
    -firebaseCreateCompanyOwner(username, email, password, companyName, companyAddress, companyOIB, companyPhone, companyDesc, companyType)
    -handleSubmit(event): void
    -useEffectDisabled(username, password, email, usernameExists, loading, companyName, companyAddress, companyOIB, companyPhone, companyDesc, companyType, loading): void
    -useEffectUsernameEmail(username, email): void
    -checkUsernameAndEmail(username, email): void
    -checkPassword(password): void
    -checkCompanyName(companyName): void
    -checkCompanyPhone(companyPhone): void
    -checkCompanyDesc(companyDesc): void
    -checkCompanyOIB(companyOIB): void
    -checkCompanyNamePay(companyNamePay): void
    -checkCompanyOIBPay(companyOIBPay): void
    -addUserInfo(): void
    -userInfoSwitch: object
    +VlasnikForm(): html
}

class UserInfo {
    -authUser: object
    -userInfo: object
    -setUserInfo(userInfo): void
    -companyInfo: object
    -setCompanyInfo(companyInfo): void
    -useEffect(authUser): void
    -userInfo(): html
}

class Index {
    -libraries: array
    -BootstrapInput: object
    -BootstrapInputModal: object
    -getServerSideProps(context): object
    -companiesRef: object
    -comapniesSnapshot: object
    -initCompanies: array
    -locationsRef: object
    -locationsSnapshot: object
    -initLocations: array
    -ChildModal(name, address, categories, lat, lng, setMySearch, setParentOpen, uid) : html
    -authUser: object
    -loading: boolean
    -firebaseSignOut(): voi
    -user: object
    -setUser(user): void
    -companyTypes: array
    -companyType: string
    -setCompanyType(companyType): void
    -companies: array
    -setCompanies(companies): void
    -locations: array
    -setLocations(locations): void
    -getUserInfo(): void
    -unsubscribeCompanies: object
    -unsubscribeLocations: object
    -isLoaded: boolean
    -loadError: string
    -modalData: object
    -setModalData(modalData): void
    -modalOpen: boolean
    -setModalOpen(modalOpen): void
    -map: object
    -setMap(map): void
    -containerStyle: object
    -center: object
    -setCenter(center): void
    -myLocation: object
    -setMyLocation(myLocation): void
    -mySearch: object
    -setMySearch(mySearch): void
    -onLoad(marker): void
    -autoComplete: object
    -setAutoComplete(autoComplete): void
    -onPlaceChanged(): void
    -onAutocompleteLoad(autoComplete): void
    -useEffectCurrentLocation(): void
    -upvote(data): void
    -downvote(data): void
    -deleteLocation(id): void
    -onMapLoad(map): void
    -handleMapClick(event): void
    +Home(initCompanies, initLocations): html 
}

class ChangePassword {
    -loading: boolean
    -setLoading(loading): void
    -newPassowrd: string
    -setNewPassword(newPassword): void
    -passwordError: string
    -setPasswordError(passwordError): void
    -confirmPassword: string
    -setConfirmPassword(confirmPassword): void
    -confirmPasswordError: string
    -setConfirmPasswordError(confirmPasswordError): void
    -disabled: boolean
    -setDisabled(disabled): void
    -checkPasswordBlacklist(password): void
    -useEffectDisabled(newPassword, passwordError, loading): void
    -useEffectDisabledConfirm(confirmPassword, confirmPasswordError, loading): void
    -checkPassword(password): void
    -checkConfirmPassword(confirmPassword): void
    -changePassowrd(event): void
    +ChangePassword(): html
}

class ChangeInfo {
    -authUser: object
    -userInfo: object
    -setUserInfo(userInfo): void
    -companyInfo: object
    -setCompanyInfo(companyInfo): void
    -loading: boolean
    -setLoading(loading): void
    -disabled: boolean
    -setDisabled(disabled): void
    -username: string
    -setUsername(username): void
    -usernameExists: boolean
    -setUsernameExists(usernameExists): void
    -userUid: string
    -setUserUid(userUid): void
    -companyId: string
    -setCompanyId(companyId): void
    -companyName: string
    -setCompanyName(companyName): void
    -companyNameError: string
    -setCompanyNameError(companyNameError): void
    -companyDesc: string
    -setCompanyDesc(companyDesc): void
    -companyDescError: string
    -setCompanyDescError(companyDescError): void
    -useEffectDisabled(username, usernameExists, loading, companyName, companyDesc, companyNameError, companyDescError): void
    -handleSave(event): void
    -checkUsername(username): void
    -checkCompanyName(companyName): void
    -checkCompanyDesc(companyDesc): void
    -getUserInfo(): void
    +UserInfo(): html
}